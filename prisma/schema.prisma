generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  OWNER
  ADMIN
  MEMBER
  CUSTOMER
  BILLING
}

enum AccountProvider {
  GITHUB
  GOOGLE
}

enum TokenType {
  PASSWORD_RECOVER
}

enum TransactionStatus {
  PENDING
  SUCCESS
  FAILED
}

model User {
  id           String           @id @default(uuid())
  name         String?
  email        String           @unique
  passwordHash String?          @map("password_hash")
  avatarUrl    String?          @map("avatar_url")
  birthday     DateTime?
  subscription SubscriptionType @default(FREE)

  createdAt        DateTime @default(now()) @map("created_at")
  updatedAt        DateTime @updatedAt @map("updated_at")
  preferredGateway String?

  tokens             Token[]
  accounts           Account[]
  invites            Invite[]
  member_on          Member[]
  owns_organizations Organization[]

  @@map("users")
}

model Token {
  id        String    @id @default(uuid())
  type      TokenType
  createdAt DateTime  @default(now()) @map("created_at")

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @map("user_id")

  @@map("tokens")
}

model Account {
  id                String          @id @default(uuid())
  provider          AccountProvider
  providerAccountId String          @unique @map("provider_account_id")

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @map("user_id")

  @@unique([provider, userId])
  @@map("accounts")
}

model Invite {
  id        String   @id @default(uuid())
  email     String
  role      Role
  createdAt DateTime @default(now()) @map("created_at")

  author   User?   @relation(fields: [authorId], references: [id], onDelete: SetNull)
  authorId String? @map("author_id")

  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId String       @map("organization_id")

  @@unique([email, organizationId])
  @@index([email])
  @@map("invites")
}

model Member {
  id   String @id @default(uuid())
  role Role   @default(MEMBER)

  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId String       @map("organization_id")

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @map("user_id")

  @@unique([organizationId, userId])
  @@map("members")
}

model Organization {
  id                        String  @id @default(uuid())
  name                      String
  slug                      String  @unique
  domain                    String? @unique
  shouldAttachUsersByDomain Boolean @default(false) @map("should_attach_users_by_domain")
  currency                  String  @default("BRL")

  avatarUrl String?  @map("avatar_url")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  owner   User   @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId String @map("owner_id")

  invites        Invite[]
  members        Member[]
  ServiceMonitor ServiceMonitor[]
  Integration    Integration[]
  Subscription   Subscription[]
  logs           Log[]

  @@index([slug])
  @@map("organizations")
}

enum PaymentStatus {
  PENDING
  SUCCESS
  FAILED
  CANCELED
}

enum SubscriptionType {
  FREE
  PRO
  BUSINESS
}

model SubscriptionPlan {
  id               String           @id @default(uuid())
  name             String           @unique
  type             SubscriptionType @unique
  price            Decimal          @default(0.00)
  currency         String           @default("BRL")
  maxServices      Int              @default(1) // Free = 1, Pro = 5, Business = 15
  checkInterval    Int              @default(30) // Free = 30 min, Pro = 10 min, Business = 2 min
  notifications    String[]         @default(["EMAIL"]) // Free só pode email
  hasSSHMonitoring Boolean          @default(false) // Free sem SSH
  hasWebhooks      Boolean          @default(false) // Free sem webhook
  logRetentionDays Int              @default(1) // Free = 12h, Pro = 7 dias, Business = 30 dias

  subscriptions Subscription[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("subscription_plans")
}

model Subscription {
  id             String       @id @default(uuid())
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId String       @map("organization_id")

  plan   SubscriptionPlan @relation(fields: [planId], references: [id], onDelete: Cascade)
  planId String           @map("plan_id")

  status    PaymentStatus @default(PENDING)
  expiresAt DateTime?
  startedAt DateTime      @default(now()) @map("started_at")

  payments Payment[] // Relacionamento com transações de pagamento

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("subscriptions")
}

model Payment {
  id             String       @id @default(uuid())
  subscription   Subscription @relation(fields: [subscriptionId], references: [id], onDelete: Cascade)
  subscriptionId String       @map("subscription_id")

  amount        Decimal // Valor pago
  currency      String        @default("BRL")
  status        PaymentStatus @default(PENDING)
  transactionId String? // ID da transação no Stripe/Pagar.me/etc.
  provider      String // Qual gateway foi usado (ex: "Stripe", "Pagar.me")
  paidAt        DateTime?

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("payments")
}

enum ServiceType {
  VPS
  DOMAIN
  API
  TYPEBOT
  VSL
}

enum ServiceStatusType {
  UP
  DOWN
  DEGRADED
  UNKNOWN
}

enum NotificationType {
  EMAIL
  SMS
  WHATSAPP
  TELEGRAM
  SLACK
  WEBHOOK
}

enum IntegrationProvider {
  FACEBOOK
  TIKTOK
  GOOGLE_ADS
}

enum CampaignStatus {
  ACTIVE
  PAUSED
  STOPPED
}

model ServiceMonitor {
  id   String      @id @default(uuid())
  name String
  type ServiceType
  url  String?     @unique

  ipAddress   String? @map("ip_address")
  sshUser     String? @map("ssh_user")
  sshPassword String? @map("ssh_password")
  sshKey      String? @map("ssh_key")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  statuses      ServiceStatus[]
  notifications Notification[]

  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId String       @map("organization_id")

  @@map("service_monitors")
}

model ServiceStatus {
  id        String            @id @default(uuid())
  service   ServiceMonitor    @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  serviceId String            @map("service_id")
  status    ServiceStatusType
  checkedAt DateTime          @default(now()) @map("checked_at")

  @@index([serviceId, checkedAt])
  @@map("service_statuses")
}

model Notification {
  id        String           @id @default(uuid())
  type      NotificationType
  recipient String
  message   String
  sentAt    DateTime?        @map("sent_at")

  service   ServiceMonitor? @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  serviceId String?         @map("service_id")

  campaign   Campaign? @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  campaignId String?   @map("campaign_id")

  @@map("notifications")
}

model Integration {
  id             String              @id @default(uuid())
  provider       IntegrationProvider
  apiKey         String
  organization   Organization        @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId String              @map("organization_id")
  createdAt      DateTime            @default(now()) @map("created_at")

  campaigns Campaign[]

  @@unique([provider, organizationId])
  @@map("integrations")
}

model Campaign {
  id            String              @id @default(uuid())
  name          String
  provider      IntegrationProvider
  integration   Integration         @relation(fields: [integrationId], references: [id], onDelete: Cascade)
  integrationId String              @map("integration_id")
  status        CampaignStatus      @default(ACTIVE)
  createdAt     DateTime            @default(now()) @map("created_at")
  updatedAt     DateTime            @updatedAt @map("updated_at")

  notifications Notification[]

  @@map("campaigns")
}

model Log {
  id        String   @id @default(uuid())
  timestamp DateTime @default(now())
  level     LogLevel
  message   String

  organization   Organization? @relation(fields: [organizationId], references: [id], onDelete: SetNull)
  organizationId String?       @map("organization_id")

  @@index([level, timestamp])
  @@map("logs")
}

enum LogLevel {
  INFO
  WARNING
  ERROR
  DEBUG
  CRITICAL
}
